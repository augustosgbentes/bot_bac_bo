// src/strategies/sequencia.js
const { enviarTelegram } = require('../utils/telegram');
const { globalState } = require('../../config/config');

/**
 * Classe que implementa a estrat√©gia de sequ√™ncia
 */
class EstrategiaSequencia {
  constructor() {
    // Configura√ß√£o da estrat√©gia
    this.nome = "Sequ√™ncia";
    this.descricao = "Detecta sequ√™ncia de 4 resultados iguais e aposta na continua√ß√£o";
    
    // Estado da estrat√©gia
    this.alertaAtivo = false;
    this.sequenciaConsiderada = 4; // 4 resultados
    this.ultimosResultados = []; // Para rastrear os √∫ltimos resultados
    this.alvoProximaRodada = null; // "player" ou "banker"
    this.alvoAtual = null; // Para compatibilidade
    this.rodadaG0 = null;
    
    // Contadores
    this.totalGreens = 0;
    this.totalReds = 0;
    this.greensG0 = 0; // Contador para vit√≥rias no G0
    this.greensG1 = 0; // Contador para vit√≥rias no G1
    this.redsG1 = 0; // Contador para derrotas no G1
    this.ties = 0; // Contador para empates que contam como green
    this.ultimaVitoria = null;
    this.vitoriaConsecutiva = 0;
    this.maiorVitoriaConsecutiva = 0;
    
    // Contador para rastrear REDs consecutivos
    this.redsConsecutivos = 0;
  }

  /**
   * Processa um novo resultado para a estrat√©gia de sequ√™ncia
   * @param {Object} res - Objeto contendo o resultado a ser processado
   * @returns {Promise<void>}
   */
  async processarResultado(res) {
    // Verificar se o resultado √© um empate e se j√° temos um alerta ativo
    if (res.resultado === "tie" && this.alertaAtivo) {
      // Se for um empate quando temos um alerta ativo, consideramos como vit√≥ria
      console.log(
        "Empate detectado durante alerta ativo. Contabilizando como Green para estrat√©gia de sequ√™ncia, mas registrando como Tie"
      );

      // Incrementa contador de ties em vez de greens, mas mant√©m l√≥gica de vit√≥ria
      this.ties++;
      this.vitoriaConsecutiva++;
      
      // Reset contador de REDs consecutivos ao ter um Green
      this.redsConsecutivos = 0;

      // Atualiza o contador de maior sequ√™ncia de vit√≥rias
      if (this.vitoriaConsecutiva > this.maiorVitoriaConsecutiva) {
        this.maiorVitoriaConsecutiva = this.vitoriaConsecutiva;
      }

      await enviarTelegram(
        `üü¢ SEQU√äNCIA: TIE/EMPATE [${res.player}-${
          res.banker
        }], ‚úÖ Tie (Conta como Green!) para estrat√©gia de sequ√™ncia! [${
          this.vitoriaConsecutiva
        } VIT√ìRIA${
          this.vitoriaConsecutiva > 1 ? "S" : ""
        } CONSECUTIVA${this.vitoriaConsecutiva > 1 ? "S" : ""}]
üìä Sequ√™ncia: Greens: ${this.totalGreens} [G0=${
          this.greensG0
        } G1=${this.greensG1}] | Tie: ${this.ties} | Reds: ${
          this.totalReds
        }`,
        "sequencia"
      );

      // Registrar a vit√≥ria
      this.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      this.resetarAlerta();
      return;
    }
    // Ignorar empates para an√°lise de sequ√™ncia e detec√ß√£o
    else if (res.resultado === "tie") {
      console.log("Ignorando empate para an√°lise de estrat√©gia de sequ√™ncia");
      return;
    }

    // Logs de depura√ß√£o
    console.log(`Estado atual da estrat√©gia de sequ√™ncia:`);
    console.log(`- Alerta ativo: ${this.alertaAtivo}`);
    console.log(`- sequenciaConsiderada: ${this.sequenciaConsiderada}`);
    console.log(`- Total no hist√≥rico: ${globalState.historico.length}`);

    // Debug para verificar o estado atual
    const resultadosSemEmpate = globalState.historico.filter(
      (item) => item.resultado !== "tie"
    );
    console.log(
      `Estado para an√°lise de sequ√™ncia: ${resultadosSemEmpate
        .slice(0, 6)
        .map((r) => (r.resultado === "player" ? "P" : "B"))
        .join("")}`
    );

    // Primeira rodada ap√≥s detectar padr√£o (G0)
    if (
      this.alertaAtivo &&
      this.alvoAtual &&
      this.rodadaG0 === null
    ) {
      console.log(
        `Alerta ativo para sequ√™ncia, primeira tentativa (G0). Alvo: ${this.alvoAtual}`
      );

      if (res.resultado === this.alvoAtual) {
        this.totalGreens++;
        this.greensG0++; // Incrementa contador de G0
        this.vitoriaConsecutiva++;
        
        // Reset contador de REDs consecutivos ao ter um Green
        this.redsConsecutivos = 0;

        // Atualiza o contador de maior sequ√™ncia de vit√≥rias
        if (this.vitoriaConsecutiva > this.maiorVitoriaConsecutiva) {
          this.maiorVitoriaConsecutiva = this.vitoriaConsecutiva;
        }

        await enviarTelegram(
          `üü¢ SEQU√äNCIA: ${res.resultado.toUpperCase()} [${res.player}-${
            res.banker
          }], ‚úÖ Green para estrat√©gia de sequ√™ncia! [${
            this.vitoriaConsecutiva
          } VIT√ìRIA${
            this.vitoriaConsecutiva > 1 ? "S" : ""
          } CONSECUTIVA${this.vitoriaConsecutiva > 1 ? "S" : ""}]
üìä Sequ√™ncia: Greens: ${this.totalGreens} [G0=${
            this.greensG0
          } G1=${this.greensG1}] | Tie: ${this.ties} | Reds: ${
            this.totalReds
          }`,
          "sequencia"
        );

        // Registrar a vit√≥ria
        this.ultimaVitoria = {
          resultado: res.resultado,
          player: res.player,
          banker: res.banker,
          dataHora: new Date(),
        };

        // Resetar alerta
        this.resetarAlerta();
      } else {
        await enviarTelegram(
          `üîÑ SEQU√äNCIA: ${res.resultado.toUpperCase()} [${res.player}-${
            res.banker
          }], vamos para o G1 na estrat√©gia de sequ√™ncia...`,
          "sequencia"
        );
        this.rodadaG0 = res;
      }
    }
    // Segunda rodada ap√≥s detectar padr√£o (G1)
    else if (
      this.alertaAtivo &&
      this.alvoAtual &&
      this.rodadaG0
    ) {
      console.log("Processando G1 para estrat√©gia de sequ√™ncia");

      if (res.resultado === this.alvoAtual) {
        this.totalGreens++;
        this.greensG1++; // Incrementa contador de G1
        this.vitoriaConsecutiva++;
        
        // Reset contador de REDs consecutivos ao ter um Green
        this.redsConsecutivos = 0;

        // Atualiza o contador de maior sequ√™ncia de vit√≥rias
        if (this.vitoriaConsecutiva > this.maiorVitoriaConsecutiva) {
          this.maiorVitoriaConsecutiva = this.vitoriaConsecutiva;
        }

        await enviarTelegram(
          `üü¢ SEQU√äNCIA: ${res.resultado.toUpperCase()} [${res.player}-${
            res.banker
          }], ‚úÖ Green no G1 para estrat√©gia de sequ√™ncia! [${
            this.vitoriaConsecutiva
          } VIT√ìRIA${
            this.vitoriaConsecutiva > 1 ? "S" : ""
          } CONSECUTIVA${this.vitoriaConsecutiva > 1 ? "S" : ""}]
üìä Sequ√™ncia: Greens: ${this.totalGreens} [G0=${
            this.greensG0
          } G1=${this.greensG1}] | Tie: ${this.ties} | Reds: ${
            this.totalReds
          }`,
          "sequencia"
        );

        // Registrar a vit√≥ria
        this.ultimaVitoria = {
          resultado: res.resultado,
          player: res.player,
          banker: res.banker,
          dataHora: new Date(),
        };

        // Resetar alerta
        this.resetarAlerta();
      } else {
        // Incrementar o contador de REDs consecutivos
        this.redsConsecutivos++;
        this.totalReds++;
        this.redsG1++; // Incrementa contador de Reds no G1
        this.vitoriaConsecutiva = 0;

        await enviarTelegram(
          `‚ùå SEQU√äNCIA: ${res.resultado.toUpperCase()} [${res.player}-${
            res.banker
          }], ‚ùå Red na estrat√©gia de sequ√™ncia
üìä Sequ√™ncia: Greens: ${this.totalGreens} [G0=${
            this.greensG0
          } G1=${this.greensG1}] | Tie: ${this.ties} | Reds: ${
            this.totalReds
          }`,
          "sequencia"
        );
        
        // Para sequ√™ncia, enviar para o grupo RED ap√≥s 2 reds consecutivos
        if (this.redsConsecutivos >= 2) {
          await enviarTelegram(
            `‚ö†Ô∏è ALERTA DE SEQU√äNCIA DE REDS - ESTRAT√âGIA SEQU√äNCIA ‚ö†Ô∏è
‚ùå ${res.resultado.toUpperCase()} [${res.player}-${res.banker}]
‚ùå Esper√°vamos ${this.alvoAtual.toUpperCase()}, mas veio ${res.resultado.toUpperCase()}
üìä Total: ${this.totalReds} reds vs ${this.totalGreens} greens
üîÑ ${this.redsConsecutivos} REDs consecutivos - FIQUE ATENTO!`,
            "sequencia",
            true // indicador que √© para o grupo RED
          );
        }

        // Registrar a derrota
        this.ultimaVitoria = {
          resultado: res.resultado,
          player: res.player,
          banker: res.banker,
          dataHora: new Date(),
        };

        // Resetar alerta
        this.resetarAlerta();
      }
    }
    // An√°lise normal do hist√≥rico para detec√ß√£o de sequ√™ncias
    else if (
      !this.alertaAtivo &&
      globalState.historico.length >= this.sequenciaConsiderada
    ) {
      // Verificamos os √∫ltimos N resultados, ignorando empates
      const resultadosSemEmpate = globalState.historico.filter(
        (item) => item.resultado !== "tie"
      );

      if (resultadosSemEmpate.length >= this.sequenciaConsiderada) {
        // Verifica se os resultados s√£o todos iguais
        const primeirosResultados = resultadosSemEmpate.slice(
          0,
          this.sequenciaConsiderada
        );

        // Debug para verificar exatamente o que estamos checando
        const sequenciaStr = primeirosResultados
          .map((r) => (r.resultado === "player" ? "P" : "B"))
          .join("");
        console.log(`Verificando sequ√™ncia: ${sequenciaStr}`);

        const primeiroResultado = primeirosResultados[0].resultado;
        const todosIguais = primeirosResultados.every(
          (item) => item.resultado === primeiroResultado
        );

        console.log(`Todos iguais a ${primeiroResultado}? ${todosIguais}`);

        if (todosIguais) {
          console.log("**** SEQU√äNCIA DE 4 DETECTADA! ****");
          this.alertaAtivo = true;
          // Define o alvo como o MESMO da sequ√™ncia detectada
          this.alvoAtual = primeiroResultado;
          this.alvoProximaRodada = this.alvoAtual; // Para compatibilidade

          await enviarTelegram(
            `‚ö†Ô∏è ESTRAT√âGIA DE SEQU√äNCIA: ${
              this.sequenciaConsiderada
            }x ${primeiroResultado.toUpperCase()} seguidos!
üéØ Entrada sugerida: ${this.alvoAtual.toUpperCase()} na pr√≥xima rodada!
üìä Stats: Greens: ${this.totalGreens} [G0=${
              this.greensG0
            } G1=${this.greensG1}] | Tie: ${this.ties} | Reds: ${
              this.totalReds
            }`,
            "sequencia"
          );

          console.log(
            `Alerta ativado para sequ√™ncia! Alvo: ${this.alvoAtual}`
          );
        }
      }
    }
  }

  /**
   * Reseta o alerta da estrat√©gia
   */
  resetarAlerta() {
    console.log("Resetando alerta de sequ√™ncia");
    this.alertaAtivo = false;
    this.alvoAtual = null;
    this.alvoProximaRodada = null;
    this.rodadaG0 = null;
    // N√£o reseta redsConsecutivos pois queremos contar entre alertas diferentes
  }

  /**
   * Reinicia os contadores da estrat√©gia (usado em mudan√ßas de dia)
   */
  resetarContadores() {
    this.totalGreens = 0;
    this.totalReds = 0;
    this.greensG0 = 0;
    this.greensG1 = 0;
    this.redsG1 = 0;
    this.ties = 0; // Resetar contador de ties
    this.vitoriaConsecutiva = 0;
    this.redsConsecutivos = 0; // Resetar contador de REDs consecutivos
    // N√£o resetamos a maior sequ√™ncia de vit√≥rias
    // this.maiorVitoriaConsecutiva = 0;
  }

  /**
   * Retorna o status atual da estrat√©gia
   * @returns {Object} Estado atual da estrat√©gia
   */
  getStatus() {
    return {
      nome: this.nome,
      alertaAtivo: this.alertaAtivo,
      alvoAtual: this.alvoAtual,
      alvoProximaRodada: this.alvoProximaRodada,
      rodadaG0: this.rodadaG0,
      totalGreens: this.totalGreens,
      totalReds: this.totalReds,
      greensG0: this.greensG0,
      greensG1: this.greensG1,
      redsG1: this.redsG1,
      ties: this.ties, // Incluir ties no status
      vitoriaConsecutiva: this.vitoriaConsecutiva,
      maiorVitoriaConsecutiva: this.maiorVitoriaConsecutiva,
      redsConsecutivos: this.redsConsecutivos // Adicionar contador de REDs consecutivos
    };
  }

  /**
   * Envia mensagem de inicializa√ß√£o para o Telegram
   */
  async enviarMensagemInicial() {
    await enviarTelegram(
      "üé≤ Bot do Bac Bo iniciado! Monitorando estrat√©gia de SEQU√äNCIA (4 iguais)...",
      "sequencia"
    );
    console.log("Estrat√©gia de Sequ√™ncia inicializada!");
  }
}

module.exports = EstrategiaSequencia;