// Fun√ß√£o para processar estrat√©gia de Diferen√ßas Espec√≠ficas
async function processarEstrategiaDiferencas(res) {
  // Ignorar empates para esta estrat√©gia
  if (res.resultado === "tie") {
    console.log("Ignorando empate para estrat√©gia de diferen√ßas");
    return;
  }

  // Classificar a diferen√ßa atual
  const diferencaAtual = res.diferenca;
  let tipoDiferenca = "pequena"; // 1-2

  if (diferencaAtual >= 5) {
    tipoDiferenca = "grande"; // 5+
  } else if (diferencaAtual >= 3) {
    tipoDiferenca = "media"; // 3-4
  }

  // Adiciona a diferen√ßa atual √† lista
  estrategiaDiferencas.ultimasDiferencas.unshift({
    valor: diferencaAtual,
    tipo: tipoDiferenca,
  });

  // Mant√©m apenas as √∫ltimas N diferen√ßas
  if (
    estrategiaDiferencas.ultimasDiferencas.length >
    estrategiaDiferencas.qtdConsiderada
  ) {
    estrategiaDiferencas.ultimasDiferencas =
      estrategiaDiferencas.ultimasDiferencas.slice(
        0,
        estrategiaDiferencas.qtdConsiderada
      );
  }

  // Primeira rodada ap√≥s detectar padr√£o (G0)
  if (
    estrategiaDiferencas.alertaAtivo &&
    estrategiaDiferencas.alvoProximaRodada &&
    estrategiaDiferencas.rodadaG0 === null
  ) {
    console.log(
      `Alerta ativo para diferen√ßa ${estrategiaDiferencas.alvoProximaRodada}, primeira tentativa (G0).`
    );

    // Verificamos se a diferen√ßa atual corresponde ao alvo esperado
    const acertou = tipoDiferenca === estrategiaDiferencas.alvoProximaRodada;

    if (acertou) {
      estrategiaDiferencas.totalGreens++;
      estrategiaDiferencas.vitoriaConsecutiva++;

      // Atualiza o contador de maior sequ√™ncia de vit√≥rias
      if (
        estrategiaDiferencas.vitoriaConsecutiva >
        estrategiaDiferencas.maiorVitoriaConsecutiva
      ) {
        estrategiaDiferencas.maiorVitoriaConsecutiva =
          estrategiaDiferencas.vitoriaConsecutiva;
      }

      await enviarTelegram(
        `üü¢ DIFEREN√áA ${estrategiaDiferencas.alvoProximaRodada.toUpperCase()}: ${res.resultado.toUpperCase()} [${
          res.player
        }-${
          res.banker
        }], ‚úÖ Green! Diferen√ßa de ${diferencaAtual} √© ${tipoDiferenca} como esperado [${
          estrategiaDiferencas.vitoriaConsecutiva
        } VIT√ìRIA${
          estrategiaDiferencas.vitoriaConsecutiva > 1 ? "S" : ""
        } CONSECUTIVA${
          estrategiaDiferencas.vitoriaConsecutiva > 1 ? "S" : ""
        }]\nüìä Diferen√ßas: Greens: ${
          estrategiaDiferencas.totalGreens
        } | Reds: ${estrategiaDiferencas.totalReds}`,
        "diferencas"
      );

      // Registrar a vit√≥ria
      estrategiaDiferencas.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      resetarAlertaDiferencas();
    } else {
      await enviarTelegram(
        `üîÑ DIFEREN√áA ${estrategiaDiferencas.alvoProximaRodada.toUpperCase()}: ${res.resultado.toUpperCase()} [${
          res.player
        }-${
          res.banker
        }], vamos para o G1... Diferen√ßa de ${diferencaAtual} √© ${tipoDiferenca}, esper√°vamos ${
          estrategiaDiferencas.alvoProximaRodada
        }`,
        "diferencas"
      );
      estrategiaDiferencas.rodadaG0 = res;
    }
  }
  // Segunda rodada ap√≥s detectar padr√£o (G1)
  else if (
    estrategiaDiferencas.alertaAtivo &&
    estrategiaDiferencas.alvoProximaRodada &&
    estrategiaDiferencas.rodadaG0
  ) {
    console.log("Processando G1 para estrat√©gia de diferen√ßas");

    // Verificamos se a diferen√ßa atual corresponde ao alvo esperado
    const acertou = tipoDiferenca === estrategiaDiferencas.alvoProximaRodada;

    if (acertou) {
      estrategiaDiferencas.totalGreens++;
      estrategiaDiferencas.vitoriaConsecutiva++;

      // Atualiza o contador de maior sequ√™ncia de vit√≥rias
      if (
        estrategiaDiferencas.vitoriaConsecutiva >
        estrategiaDiferencas.maiorVitoriaConsecutiva
      ) {
        estrategiaDiferencas.maiorVitoriaConsecutiva =
          estrategiaDiferencas.vitoriaConsecutiva;
      }

      await enviarTelegram(
        `üü¢ DIFEREN√áA ${estrategiaDiferencas.alvoProximaRodada.toUpperCase()}: ${res.resultado.toUpperCase()} [${
          res.player
        }-${
          res.banker
        }], ‚úÖ Green no G1! Diferen√ßa de ${diferencaAtual} √© ${tipoDiferenca} como esperado [${
          estrategiaDiferencas.vitoriaConsecutiva
        } VIT√ìRIA${
          estrategiaDiferencas.vitoriaConsecutiva > 1 ? "S" : ""
        } CONSECUTIVA${
          estrategiaDiferencas.vitoriaConsecutiva > 1 ? "S" : ""
        }]\nüìä Diferen√ßas: Greens: ${
          estrategiaDiferencas.totalGreens
        } | Reds: ${estrategiaDiferencas.totalReds}`,
        "diferencas"
      );

      // Registrar a vit√≥ria
      estrategiaDiferencas.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      resetarAlertaDiferencas();
    } else {
      estrategiaDiferencas.totalReds++;
      estrategiaDiferencas.vitoriaConsecutiva = 0;

      await enviarTelegram(
        `‚ùå DIFEREN√áA ${estrategiaDiferencas.alvoProximaRodada.toUpperCase()}: ${res.resultado.toUpperCase()} [${
          res.player
        }-${
          res.banker
        }], ‚ùå Red! Diferen√ßa de ${diferencaAtual} √© ${tipoDiferenca}, esper√°vamos ${
          estrategiaDiferencas.alvoProximaRodada
        }\nüìä Diferen√ßas: Greens: ${estrategiaDiferencas.totalGreens} | Reds: ${
          estrategiaDiferencas.totalReds
        }`,
        "diferencas"
      );

      // Registrar a derrota
      estrategiaDiferencas.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      resetarAlertaDiferencas();
    }
  }
  // An√°lise normal do hist√≥rico para detec√ß√£o de padr√µes de diferen√ßas
  else if (
    !estrategiaDiferencas.alertaAtivo &&
    estrategiaDiferencas.ultimasDiferencas.length >=
      estrategiaDiferencas.qtdConsiderada
  ) {
    // Verificar se temos uma sequ√™ncia de diferen√ßas do mesmo tipo
    const contagem = { pequena: 0, media: 0, grande: 0 };

    estrategiaDiferencas.ultimasDiferencas.forEach((d) => {
      contagem[d.tipo]++;
    });

    // Se temos predomin√¢ncia de um tipo de diferen√ßa (pelo menos 2 em 3)
    let tipoPredominante = null;

    if (contagem.pequena >= 2) {
      tipoPredominante = "pequena";
    } else if (contagem.media >= 2) {
      tipoPredominante = "media";
    } else if (contagem.grande >= 2) {
      tipoPredominante = "grande";
    }

    if (tipoPredominante) {
      // O padr√£o sugere que o pr√≥ximo tipo de diferen√ßa ser√° o mesmo do predominante
      estrategiaDiferencas.alertaAtivo = true;
      estrategiaDiferencas.alvoProximaRodada = tipoPredominante;

      await enviarTelegram(
        `‚ö†Ô∏è ESTRAT√âGIA DE DIFEREN√áAS: Detectadas ${contagem[tipoPredominante]} diferen√ßas ${tipoPredominante}s nos √∫ltimos ${estrategiaDiferencas.qtdConsiderada} resultados!\nüéØ Entrada sugerida: Apostar em diferen√ßa ${tipoPredominante} na pr√≥xima rodada!`,
        "diferencas"
      );

      console.log(
        `Alerta ativado para diferen√ßas! Pr√≥ximo tipo esperado: ${estrategiaDiferencas.alvoProximaRodada}`
      );
    }
  }
}

// Fun√ß√£o para resetar alerta de diferen√ßas
function resetarAlertaDiferencas() {
  console.log("Resetando alerta de diferen√ßas");
  estrategiaDiferencas.alertaAtivo = false;
  estrategiaDiferencas.alvoProximaRodada = null;
  estrategiaDiferencas.rodadaG0 = null;

  // N√£o limpamos todas as diferen√ßas para manter hist√≥rico parcial
  // Mantemos as √∫ltimas 2 para continuar an√°lise
  if (estrategiaDiferencas.ultimasDiferencas.length > 2) {
    estrategiaDiferencas.ultimasDiferencas =
      estrategiaDiferencas.ultimasDiferencas.slice(0, 2);
  }
} // Adicionando nova estrat√©gia para Diferen√ßas Espec√≠ficas
let estrategiaDiferencas = {
  alertaAtivo: false,
  ultimasDiferencas: [], // Armazenar as √∫ltimas diferen√ßas
  qtdConsiderada: 3, // Quantas diferen√ßas para considerar
  rodadaG0: null,
  alvoProximaRodada: null, // "pequena" (1-2), "media" (3-4), "grande" (5+)
  totalGreens: 0,
  totalReds: 0,
  ultimaVitoria: null,
  vitoriaConsecutiva: 0,
  maiorVitoriaConsecutiva: 0,
};
const axios = require("axios");
const puppeteer = require("puppeteer");
require("dotenv").config();
const express = require("express");

// Estado do bot
let historico = [];
let ultimoDiaVerificado = new Date().getDate(); // Dia do m√™s atual
let contadorRodadas = 0;
let ultimoResultadoProcessado = null;

// Contadores gerais
let totalPlayer = 0;
let totalBanker = 0;
let totalTie = 0;

// Maior pontua√ß√£o j√° registrada para cada lado
let maiorPontuacaoPlayer = 0;
let maiorPontuacaoBanker = 0;

// Rastreamento de sequ√™ncias
let sequenciaAtualPlayer = 0;
let sequenciaAtualBanker = 0;
let maiorSequenciaPlayer = 0;
let maiorSequenciaBanker = 0;

// Rastreamento de sequ√™ncias de empates
let sequenciaAtualTie = 0;
let maiorSequenciaTie = 0;

// √öltima vit√≥ria registrada
let ultimaVitoria = {
  resultado: null,
  playerScore: null,
  bankerScore: null,
  estrategia: null,
  dataHora: null,
};

// Estrat√©gia de Sequ√™ncia
let estrategiaSequencia = {
  alertaAtivo: false,
  sequenciaConsiderada: 4, // Alterado de 3 para 4 resultados
  ultimosResultados: [], // Para rastrear os √∫ltimos resultados
  alvoProximaRodada: null, // "player" ou "banker"
  rodadaG0: null,
  totalGreens: 0,
  totalReds: 0,
  ultimaVitoria: null,
  vitoriaConsecutiva: 0,
  maiorVitoriaConsecutiva: 0,
};

// Estrat√©gia 2: Diferen√ßa Pequena (Apostando no mesmo lado ap√≥s detectar padr√£o)
let estrategiaDiferencaPequena = {
  alertaAtivo: false,
  ultimasDiferencas: [], // Armazenar as √∫ltimas diferen√ßas
  ultimosResultados: [], // Lista para armazenar resultados com classifica√ß√£o alto/baixo
  qtdConsiderada: 3, // Quantas diferen√ßas pequenas seguidas para ativar
  diferencaLimite: 2, // Diferen√ßa m√°xima para considerar "pequena"
  limiteValorBaixo: 4, // Valor m√°ximo para considerar "baixo"
  limiteValorAlto: 8, // Valor m√≠nimo para considerar "alto"
  rodadaG0: null,
  proximoAlvo: null, // Para armazenar o alvo da pr√≥xima rodada (alto/baixo)
  alvoProximaRodada: null, // Mantido para compatibilidade com c√≥digo existente
  totalGreens: 0,
  totalReds: 0,
  ultimaVitoria: null,
  vitoriaConsecutiva: 0,
  maiorVitoriaConsecutiva: 0,
};

// Estrat√©gia 3: Ap√≥s Empate (apostar no mesmo resultado anterior ao Tie)
let estrategiaAposEmpate = {
  alertaAtivo: false,
  ultimoResultadoAntesTie: null,
  rodadaG0: null,
  totalGreens: 0,
  totalReds: 0,
  ultimaVitoria: null,
  vitoriaConsecutiva: 0,
  maiorVitoriaConsecutiva: 0,
};

// Estrat√©gia 4: Altern√¢ncia espec√≠fica
// Detecta padr√µes de altern√¢ncia como PBPB (Player-Banker-Player-Banker)
let estrategiaAlternancia = {
  alertaAtivo: false,
  padrao: [], // Padr√£o detectado
  proximoResultadoEsperado: null,
  rodadaG0: null,
  totalGreens: 0,
  totalReds: 0,
  ultimaVitoria: null,
  vitoriaConsecutiva: 0,
  maiorVitoriaConsecutiva: 0,
};

// Configura√ß√£o do Telegram
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// Tokens e chat IDs para estrat√©gias espec√≠ficas
const TELEGRAM_TOKEN_SEQUENCIA = process.env.TELEGRAM_TOKEN_SEQUENCIA;
const TELEGRAM_CHAT_ID_SEQUENCIA = process.env.TELEGRAM_CHAT_ID_SEQUENCIA;

const TELEGRAM_TOKEN_DIFERENCA = process.env.TELEGRAM_TOKEN_DIFERENCA;
const TELEGRAM_CHAT_ID_DIFERENCA = process.env.TELEGRAM_CHAT_ID_DIFERENCA;

const TELEGRAM_TOKEN_APOS_EMPATE = process.env.TELEGRAM_TOKEN_APOS_EMPATE;
const TELEGRAM_CHAT_ID_APOS_EMPATE = process.env.TELEGRAM_CHAT_ID_APOS_EMPATE;

// Vari√°veis globais para controlar o navegador
let browser = null;
let page = null;

// Fun√ß√£o principal para buscar resultados do Bac Bo
async function getBacBoResultado() {
  try {
    console.log("Buscando resultados do Bac Bo...");

    // Inicializar o navegador apenas uma vez
    if (!browser) {
      console.log("Iniciando navegador pela primeira vez...");

      // Configura√ß√£o para ambiente Linux em VPS
      const options = {
        headless: true,
        args: [
          "--no-sandbox",
          "--disable-setuid-sandbox",
          "--disable-dev-shm-usage",
          "--disable-gpu",
          "--disable-features=AudioServiceOutOfProcess",
          "--disable-extensions",
          "--single-process",
          "--no-zygote",
          "--no-first-run",
          "--ignore-certificate-errors",
        ],
      };

      // Verifica se o caminho foi especificado nas vari√°veis de ambiente
      if (process.env.CHROME_PATH) {
        console.log(
          `Usando caminho do Chrome especificado nas vari√°veis de ambiente: ${process.env.CHROME_PATH}`
        );
        options.executablePath = process.env.CHROME_PATH;
      }

      try {
        browser = await puppeteer.launch(options);
        console.log("Navegador iniciado com sucesso!");
      } catch (error) {
        console.error(`Erro ao iniciar o navegador: ${error.message}`);
        console.error("Tentando alternativas para executar o Chrome...");

        // Tente localizar o Chrome usando comando do sistema
        const { execSync } = require("child_process");
        try {
          // Tenta v√°rios poss√≠veis caminhos do Chrome/Chromium no Linux
          let chromePath = "";
          try {
            chromePath = execSync("which google-chrome").toString().trim();
          } catch (e) {
            try {
              chromePath = execSync("which chromium-browser").toString().trim();
            } catch (e) {
              try {
                chromePath = execSync("which chromium").toString().trim();
              } catch (e) {
                throw new Error(
                  "Nenhum execut√°vel do Chrome/Chromium encontrado."
                );
              }
            }
          }

          console.log(
            `Chrome/Chromium encontrado no sistema em: ${chromePath}`
          );
          options.executablePath = chromePath;
          browser = await puppeteer.launch(options);
          console.log("Navegador iniciado ap√≥s usar localiza√ß√£o alternativa!");
        } catch (fallbackError) {
          console.error(
            `Erro ap√≥s tentativa alternativa: ${fallbackError.message}`
          );
          throw new Error(
            "N√£o foi poss√≠vel iniciar o navegador ap√≥s tentativas alternativas."
          );
        }
      }

      console.log("Abrindo nova p√°gina...");
      page = await browser.newPage();

      // Configurando o User-Agent para parecer um navegador normal
      await page.setUserAgent(
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36"
      );

      // Otimiza√ß√µes adicionais para ambiente VPS
      await page.setRequestInterception(true);
      page.on("request", (request) => {
        // Bloquear recursos desnecess√°rios para economizar largura de banda e CPU
        const blockedResourceTypes = ["image", "media", "font", "stylesheet"];
        if (
          blockedResourceTypes.includes(request.resourceType()) &&
          !request.url().includes("casinoscores.com") // s√≥ bloqueia recursos de terceiros
        ) {
          request.abort();
        } else {
          request.continue();
        }
      });
    } else {
      console.log("Navegador j√° est√° aberto, apenas atualizando a p√°gina...");
    }

    // Verificar mudan√ßa de dia a cada execu√ß√£o
    verificarMudancaDeDia();

    try {
      // Navegar ou recarregar a p√°gina com timeout aumentado
      if (page.url() === "https://casinoscores.com/pt-br/bac-bo/") {
        console.log("Recarregando a p√°gina...");
        await page.reload({
          waitUntil: "networkidle2",
          timeout: 120000, // 2 minutos - mais tempo para ambiente VPS
        });
      } else {
        console.log("Navegando para casinoscores.com/pt-br/bac-bo/...");
        await page.goto("https://casinoscores.com/pt-br/bac-bo/", {
          waitUntil: "networkidle2",
          timeout: 120000, // 2 minutos - mais tempo para ambiente VPS
        });
      }
    } catch (navigationError) {
      console.error(`Erro ao navegar: ${navigationError.message}`);
      console.log("Tentando continuar mesmo com erro de navega√ß√£o...");
      // Tentar recuperar de erros de navega√ß√£o
      await new Promise((r) => setTimeout(r, 5000)); // Espera 5 segundos antes de continuar
    }

    console.log("P√°gina carregada, extraindo resultados...");

    // Esperando pelo conte√∫do carregar
    await page
      .waitForSelector("#SpinHistoryTableBacBo", { timeout: 60000 })
      .catch(() => {
        console.log(
          "Timeout ao esperar pelo seletor, tentando extrair mesmo assim..."
        );
      });

    // Extraindo os resultados detalhados do Bac Bo da tabela de hist√≥rico
    const resultados = await page
      .evaluate(() => {
        try {
          const items = [];
          // Seletor para a tabela de hist√≥rico
          const linhas = document.querySelectorAll(
            "#SpinHistoryTableBacBo tbody tr"
          );

          if (!linhas || linhas.length === 0) {
            console.error("Elementos da tabela n√£o encontrados na p√°gina");
            return [];
          }

          // Processamos cada linha da tabela (cada resultado)
          linhas.forEach((linha) => {
            try {
              // Extrai o resultado (Player/Banker/Tie) da imagem
              const imagemResultado = linha.querySelector("img[alt='√äxito']");
              if (!imagemResultado) return;

              const srcImagem = imagemResultado.getAttribute("src");
              let resultado = null;

              if (srcImagem.includes("/P.png")) {
                resultado = "player";
              } else if (srcImagem.includes("/B.png")) {
                resultado = "banker";
              } else if (srcImagem.includes("/TIE.png")) {
                resultado = "tie";
              }

              // Agora extra√≠mos as pontua√ß√µes
              const divOutcome = linha.querySelector(".bac-bo-dice-outcome");
              if (!divOutcome) return;

              // Pontua√ß√£o do Player
              const spanPlayerSum = divOutcome.querySelector(
                ".d-flex:nth-child(1) span"
              );
              const playerScore = spanPlayerSum
                ? parseInt(spanPlayerSum.textContent.replace("Œ£", ""), 10)
                : 0;

              // Pontua√ß√£o do Banker
              const spanBankerSum = divOutcome.querySelector(
                ".d-flex:nth-child(2) span"
              );
              const bankerScore = spanBankerSum
                ? parseInt(spanBankerSum.textContent.replace("Œ£", ""), 10)
                : 0;

              // Diferen√ßa entre as pontua√ß√µes
              const diferenca = Math.abs(playerScore - bankerScore);

              // Adiciona o resultado ao array de items
              items.push({
                player: playerScore,
                banker: bankerScore,
                resultado: resultado,
                diferenca: diferenca,
                // Adicionamos a hora para verificar se √© um resultado novo
                hora: linha.querySelector(".dateTime_DateTime__time__f0_Bn")
                  ? linha.querySelector(".dateTime_DateTime__time__f0_Bn")
                      .textContent
                  : "",
              });
            } catch (rowError) {
              console.error(
                "Erro ao processar linha da tabela:",
                rowError.message
              );
            }
          });

          return items;
        } catch (evalError) {
          console.error("Erro durante execu√ß√£o no browser:", evalError.message);
          return [];
        }
      })
      .catch((error) => {
        console.error("Erro ao executar evaluate:", error.message);
        return [];
      });

    if (!resultados || resultados.length === 0) {
      console.error("N√£o foi poss√≠vel encontrar resultados do Bac Bo.");
      return;
    }

    console.log(`Encontrados ${resultados.length} resultados`);
    console.log(
      `√öltimo resultado: Player ${resultados[0].player} - Banker ${resultados[0].banker} (${resultados[0].resultado})`
    );

    // Pegamos o resultado mais recente (primeiro da lista)
    const ultimoResultado = resultados[0];

    // Verificar se √© um novo resultado
    let novoResultado = false;

    if (!ultimoResultadoProcessado) {
      novoResultado = true;
      console.log("Primeiro resultado desde o in√≠cio do programa.");
    } else if (
      ultimoResultadoProcessado.player !== resultados[0].player ||
      ultimoResultadoProcessado.banker !== resultados[0].banker ||
      ultimoResultadoProcessado.hora !== resultados[0].hora
    ) {
      novoResultado = true;
      console.log(
        `Novo resultado detectado: Player ${resultados[0].player} - Banker ${resultados[0].banker} (${resultados[0].resultado})`
      );
    } else {
      console.log(
        `Sem mudan√ßas nos resultados. √öltimo resultado continua sendo: Player ${resultados[0].player} - Banker ${resultados[0].banker} (${resultados[0].resultado})`
      );
    }

    if (novoResultado) {
      console.log("Novo resultado confirmado, atualizando hist√≥rico...");

      // Pegamos o √∫ltimo resultado (primeiro item da lista)
      const ultimoResultado = resultados[0];

      // Atualiza o hist√≥rico
      historico.unshift(ultimoResultado);
      if (historico.length > 30) historico = historico.slice(0, 30);

      // Incrementa os contadores
      if (ultimoResultado.resultado === "player") {
        totalPlayer++;
        sequenciaAtualPlayer++;
        sequenciaAtualBanker = 0;
        sequenciaAtualTie = 0;

        // Atualiza a maior sequ√™ncia
        if (sequenciaAtualPlayer > maiorSequenciaPlayer) {
          maiorSequenciaPlayer = sequenciaAtualPlayer;
        }
      } else if (ultimoResultado.resultado === "banker") {
        totalBanker++;
        sequenciaAtualBanker++;
        sequenciaAtualPlayer = 0;
        sequenciaAtualTie = 0;

        // Atualiza a maior sequ√™ncia
        if (sequenciaAtualBanker > maiorSequenciaBanker) {
          maiorSequenciaBanker = sequenciaAtualBanker;
        }
      } else if (ultimoResultado.resultado === "tie") {
        totalTie++;
        sequenciaAtualTie++;
        sequenciaAtualPlayer = 0;
        sequenciaAtualBanker = 0;

        // Atualiza a maior sequ√™ncia
        if (sequenciaAtualTie > maiorSequenciaTie) {
          maiorSequenciaTie = sequenciaAtualTie;
        }
      }

      // Atualiza as maiores pontua√ß√µes
      if (ultimoResultado.player > maiorPontuacaoPlayer) {
        maiorPontuacaoPlayer = ultimoResultado.player;
        console.log(`Nova maior pontua√ß√£o de Player: ${maiorPontuacaoPlayer}`);
      }
      if (ultimoResultado.banker > maiorPontuacaoBanker) {
        maiorPontuacaoBanker = ultimoResultado.banker;
        console.log(`Nova maior pontua√ß√£o de Banker: ${maiorPontuacaoBanker}`);
      }

      // Processa o resultado para as estrat√©gias
      await processarResultado(ultimoResultado);

      // Atualiza o resultado processado
      ultimoResultadoProcessado = ultimoResultado;
    } else {
      // Nenhuma mudan√ßa nos resultados
      console.log("Aguardando nova rodada do Bac Bo...");
    }
  } catch (err) {
    console.error("Erro ao capturar resultado:", err.message);
    console.error("Stack trace:", err.stack);

    // Se ocorrer um erro grave com o navegador, fechamos e reiniciamos na pr√≥xima execu√ß√£o
    if (
      err.message.includes("Protocol error") ||
      err.message.includes("Target closed") ||
      err.message.includes("Session closed") ||
      err.message.includes("Browser was not found") ||
      err.message.includes("WebSocket") ||
      err.message.includes("failed to connect") ||
      err.message.includes("connection closed")
    ) {
      console.error(
        "Erro de conex√£o com o navegador, reiniciando na pr√≥xima execu√ß√£o..."
      );
      try {
        if (page) await page.close().catch(() => {});
        if (browser) await browser.close().catch(() => {});
      } catch (closeErr) {
        console.error("Erro ao fechar navegador:", closeErr.message);
      }
      page = null;
      browser = null;
    }

    if (err.response) {
      console.error("Resposta do site:", err.response.status);
      if (err.response.data) {
        console.error(
          "HTML da resposta:",
          err.response.data.substring(0, 200) + "..."
        );
      }
    }
  }
}

// Fun√ß√µes para processar estrat√©gias

// Processa o resultado para todas as estrat√©gias
async function processarResultado(res) {
  console.log(
    `Processando resultado: ${res.resultado} (Player: ${res.player}, Banker: ${res.banker})`
  );
  contadorRodadas++;

  // Incrementa os contadores
  if (res.resultado === "player") {
    totalPlayer++;
    sequenciaAtualPlayer++;
    sequenciaAtualBanker = 0;
    sequenciaAtualTie = 0;

    // Atualiza a maior sequ√™ncia
    if (sequenciaAtualPlayer > maiorSequenciaPlayer) {
      maiorSequenciaPlayer = sequenciaAtualPlayer;
    }
  } else if (res.resultado === "banker") {
    totalBanker++;
    sequenciaAtualBanker++;
    sequenciaAtualPlayer = 0;
    sequenciaAtualTie = 0;

    // Atualiza a maior sequ√™ncia
    if (sequenciaAtualBanker > maiorSequenciaBanker) {
      maiorSequenciaBanker = sequenciaAtualBanker;
    }
  } else if (res.resultado === "tie") {
    totalTie++;
    sequenciaAtualTie++;
    sequenciaAtualPlayer = 0;
    sequenciaAtualBanker = 0;

    // Atualiza a maior sequ√™ncia
    if (sequenciaAtualTie > maiorSequenciaTie) {
      maiorSequenciaTie = sequenciaAtualTie;
    }
  }

  // Atualiza as maiores pontua√ß√µes
  if (res.player > maiorPontuacaoPlayer) {
    maiorPontuacaoPlayer = res.player;
    console.log(`Nova maior pontua√ß√£o de Player: ${maiorPontuacaoPlayer}`);
  }
  if (res.banker > maiorPontuacaoBanker) {
    maiorPontuacaoBanker = res.banker;
    console.log(`Nova maior pontua√ß√£o de Banker: ${maiorPontuacaoBanker}`);
  }

  // Log detalhado do estado atual para depura√ß√£o
  console.log(`--- ESTADO ATUAL ---`);
  console.log(
    `Alertas ativos: Sequ√™ncia: ${estrategiaSequencia.alertaAtivo}, Diferen√ßa Pequena: ${estrategiaDiferencaPequena.alertaAtivo}`
  );
  console.log(
    `Alertas ativos: Ap√≥s Empate: ${estrategiaAposEmpate.alertaAtivo}, Altern√¢ncia: ${estrategiaAlternancia.alertaAtivo}`
  );
  console.log(
    `Player: ${totalPlayer}, Banker: ${totalBanker}, Tie: ${totalTie}`
  );
  console.log(`Diferen√ßa atual: ${res.diferenca}`);
  console.log(`-------------------`);

  // Processa as estrat√©gias
  await processarEstrategiaSequencia(res);
  await processarEstrategiaDiferencaPequena(res);
  await processarEstrategiaAposEmpate(res);

  // Envia resumo a cada 100 rodadas
  if (contadorRodadas % 100 === 0) {
    await enviarResumo();
  }

  // Envia relat√≥rio detalhado a cada 200 rodadas
  if (contadorRodadas % 200 === 0) {
    await enviarRelatorioDetalhado();
  }
}

// Estrat√©gia de Sequ√™ncia
async function processarEstrategiaSequencia(res) {
  // Ignorar empates para esta estrat√©gia
  if (res.resultado === "tie") {
    console.log("Ignorando empate para estrat√©gia de sequ√™ncia");
    return;
  }

  // Primeira rodada ap√≥s detectar padr√£o (G0)
  if (
    estrategiaSequencia.alertaAtivo &&
    estrategiaSequencia.alvoAtual &&
    estrategiaSequencia.rodadaG0 === null
  ) {
    console.log(
      `Alerta ativo para sequ√™ncia, primeira tentativa (G0). Alvo: ${estrategiaSequencia.alvoAtual}`
    );

    if (res.resultado === estrategiaSequencia.alvoAtual) {
      estrategiaSequencia.totalGreens++;
      estrategiaSequencia.vitoriaConsecutiva++;

      // Atualiza o contador de maior sequ√™ncia de vit√≥rias
      if (
        estrategiaSequencia.vitoriaConsecutiva >
        estrategiaSequencia.maiorVitoriaConsecutiva
      ) {
        estrategiaSequencia.maiorVitoriaConsecutiva =
          estrategiaSequencia.vitoriaConsecutiva;
      }

      await enviarTelegram(
        `üü¢ SEQU√äNCIA: ${res.resultado.toUpperCase()} [${res.player}-${
          res.banker
        }], ‚úÖ Green para estrat√©gia de sequ√™ncia! [${
          estrategiaSequencia.vitoriaConsecutiva
        } VIT√ìRIA${
          estrategiaSequencia.vitoriaConsecutiva > 1 ? "S" : ""
        } CONSECUTIVA${
          estrategiaSequencia.vitoriaConsecutiva > 1 ? "S" : ""
        }]\nüìä Sequ√™ncia: Greens: ${estrategiaSequencia.totalGreens} | Reds: ${
          estrategiaSequencia.totalReds
        }`,
        "sequencia"
      );

      // Registrar a vit√≥ria
      estrategiaSequencia.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      resetarAlertaSequencia();
    } else {
      await enviarTelegram(
        `üîÑ SEQU√äNCIA: ${res.resultado.toUpperCase()} [${res.player}-${
          res.banker
        }], vamos para o G1 na estrat√©gia de sequ√™ncia...`,
        "sequencia"
      );
      estrategiaSequencia.rodadaG0 = res;
    }
  }
  // Segunda rodada ap√≥s detectar padr√£o (G1)
  else if (
    estrategiaSequencia.alertaAtivo &&
    estrategiaSequencia.alvoAtual &&
    estrategiaSequencia.rodadaG0
  ) {
    console.log("Processando G1 para estrat√©gia de sequ√™ncia");

    if (res.resultado === estrategiaSequencia.alvoAtual) {
      estrategiaSequencia.totalGreens++;
      estrategiaSequencia.vitoriaConsecutiva++;

      // Atualiza o contador de maior sequ√™ncia de vit√≥rias
      if (
        estrategiaSequencia.vitoriaConsecutiva >
        estrategiaSequencia.maiorVitoriaConsecutiva
      ) {
        estrategiaSequencia.maiorVitoriaConsecutiva =
          estrategiaSequencia.vitoriaConsecutiva;
      }

      await enviarTelegram(
        `üü¢ SEQU√äNCIA: ${res.resultado.toUpperCase()} [${res.player}-${
          res.banker
        }], ‚úÖ Green no G1 para estrat√©gia de sequ√™ncia! [${
          estrategiaSequencia.vitoriaConsecutiva
        } VIT√ìRIA${
          estrategiaSequencia.vitoriaConsecutiva > 1 ? "S" : ""
        } CONSECUTIVA${
          estrategiaSequencia.vitoriaConsecutiva > 1 ? "S" : ""
        }]\nüìä Sequ√™ncia: Greens: ${estrategiaSequencia.totalGreens} | Reds: ${
          estrategiaSequencia.totalReds
        }`,
        "sequencia"
      );

      // Registrar a vit√≥ria
      estrategiaSequencia.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      resetarAlertaSequencia();
    } else {
      estrategiaSequencia.totalReds++;
      estrategiaSequencia.vitoriaConsecutiva = 0;

      await enviarTelegram(
        `‚ùå SEQU√äNCIA: ${res.resultado.toUpperCase()} [${res.player}-${
          res.banker
        }], ‚ùå Red na estrat√©gia de sequ√™ncia\nüìä Sequ√™ncia: Greens: ${
          estrategiaSequencia.totalGreens
        } | Reds: ${estrategiaSequencia.totalReds}`,
        "sequencia"
      );

      // Registrar a derrota
      estrategiaSequencia.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      resetarAlertaSequencia();
    }
  }
  // An√°lise normal do hist√≥rico para detec√ß√£o de sequ√™ncias
  else if (
    !estrategiaSequencia.alertaAtivo &&
    historico.length >= estrategiaSequencia.sequenciaConsiderada
  ) {
    // Verificamos os √∫ltimos N resultados, ignorando empates
    const resultadosSemEmpate = historico.filter(
      (item) => item.resultado !== "tie"
    );

    if (
      resultadosSemEmpate.length >= estrategiaSequencia.sequenciaConsiderada
    ) {
      // Verifica se os resultados s√£o todos iguais
      const primeirosResultados = resultadosSemEmpate.slice(
        0,
        estrategiaSequencia.sequenciaConsiderada
      );
      const todosIguais = primeirosResultados.every(
        (item) => item.resultado === primeirosResultados[0].resultado
      );

      if (todosIguais) {
        estrategiaSequencia.alertaAtivo = true;
        // Define o alvo como o oposto da sequ√™ncia detectada
        estrategiaSequencia.alvoAtual =
          primeirosResultados[0].resultado === "player" ? "banker" : "player";

        await enviarTelegram(
          `‚ö†Ô∏è ESTRAT√âGIA DE SEQU√äNCIA: ${
            estrategiaSequencia.sequenciaConsiderada
          }x ${primeirosResultados[0].resultado.toUpperCase()} seguidos!\nüéØ Entrada sugerida: ${estrategiaSequencia.alvoAtual.toUpperCase()} na pr√≥xima rodada!`,
          "sequencia"
        );

        console.log(
          `Alerta ativado para sequ√™ncia! Alvo: ${estrategiaSequencia.alvoAtual}`
        );
      }
    }
  }
}

// Estrat√©gia de Padr√£o para Valores Altos/Baixos
// Estrat√©gia de Padr√£o para Valores Altos/Baixos
async function processarEstrategiaDiferencaPequena(res) {
  // Ignorar empates para esta estrat√©gia
  if (res.resultado === "tie") {
    console.log("Ignorando empate para estrat√©gia de valores altos/baixos");
    return;
  }

  // Classificar o resultado atual como alto ou baixo
  const valorPlayerAtual = res.player;
  const valorBankerAtual = res.banker;
  const vencedorAtual = res.resultado;
  const valorDoVencedor =
    vencedorAtual === "player" ? valorPlayerAtual : valorBankerAtual;

  // Verificar se os limites est√£o definidos, caso contr√°rio, usar valores padr√£o
  const limiteValorBaixo = estrategiaDiferencaPequena.limiteValorBaixo || 4;
  const limiteValorAlto = estrategiaDiferencaPequena.limiteValorAlto || 8;

  const tipoValorAtual =
    valorDoVencedor <= limiteValorBaixo
      ? "baixo"
      : valorDoVencedor >= limiteValorAlto
      ? "alto"
      : "medio";

  // Adiciona o resultado atual √† lista
  if (!estrategiaDiferencaPequena.ultimosResultados) {
    estrategiaDiferencaPequena.ultimosResultados = [];
  }

  estrategiaDiferencaPequena.ultimosResultados.unshift({
    resultado: res.resultado,
    valor: valorDoVencedor,
    tipo: tipoValorAtual,
  });

  // Mant√©m apenas os √∫ltimos N resultados
  if (
    estrategiaDiferencaPequena.ultimosResultados.length >
    estrategiaDiferencaPequena.qtdConsiderada
  ) {
    estrategiaDiferencaPequena.ultimosResultados =
      estrategiaDiferencaPequena.ultimosResultados.slice(
        0,
        estrategiaDiferencaPequena.qtdConsiderada
      );
  }

  // Primeira rodada ap√≥s detectar padr√£o (G0)
  if (
    estrategiaDiferencaPequena.alertaAtivo &&
    estrategiaDiferencaPequena.proximoAlvo &&
    estrategiaDiferencaPequena.rodadaG0 === null
  ) {
    console.log(
      `Alerta ativo para valores ${estrategiaDiferencaPequena.proximoAlvo}, primeira tentativa (G0).`
    );

    // Verificamos se o valor atual corresponde ao alvo esperado
    const acertou =
      (estrategiaDiferencaPequena.proximoAlvo === "baixo" &&
        tipoValorAtual === "baixo") ||
      (estrategiaDiferencaPequena.proximoAlvo === "alto" &&
        tipoValorAtual === "alto");

    if (acertou) {
      estrategiaDiferencaPequena.totalGreens++;
      estrategiaDiferencaPequena.vitoriaConsecutiva++;

      // Atualiza o contador de maior sequ√™ncia de vit√≥rias
      if (
        estrategiaDiferencaPequena.vitoriaConsecutiva >
        estrategiaDiferencaPequena.maiorVitoriaConsecutiva
      ) {
        estrategiaDiferencaPequena.maiorVitoriaConsecutiva =
          estrategiaDiferencaPequena.vitoriaConsecutiva;
      }

      await enviarTelegram(
        `üü¢ VALORES ${estrategiaDiferencaPequena.proximoAlvo.toUpperCase()}: ${res.resultado.toUpperCase()} [${
          res.player
        }-${
          res.banker
        }], ‚úÖ Green! O valor ${valorDoVencedor} √© ${tipoValorAtual} como esperado [${
          estrategiaDiferencaPequena.vitoriaConsecutiva
        } VIT√ìRIA${
          estrategiaDiferencaPequena.vitoriaConsecutiva > 1 ? "S" : ""
        } CONSECUTIVA${
          estrategiaDiferencaPequena.vitoriaConsecutiva > 1 ? "S" : ""
        }]\nüìä Valores: Greens: ${
          estrategiaDiferencaPequena.totalGreens
        } | Reds: ${estrategiaDiferencaPequena.totalReds}`,
        "diferenca"
      );

      // Registrar a vit√≥ria
      estrategiaDiferencaPequena.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      resetarAlertaDiferencaPequena();
    } else {
      await enviarTelegram(
        `üîÑ VALORES ${estrategiaDiferencaPequena.proximoAlvo.toUpperCase()}: ${res.resultado.toUpperCase()} [${
          res.player
        }-${
          res.banker
        }], vamos para o G1... O valor ${valorDoVencedor} √© ${tipoValorAtual}, esper√°vamos ${
          estrategiaDiferencaPequena.proximoAlvo
        }`,
        "diferenca"
      );
      estrategiaDiferencaPequena.rodadaG0 = res;
    }
  }
  // Segunda rodada ap√≥s detectar padr√£o (G1)
  else if (
    estrategiaDiferencaPequena.alertaAtivo &&
    estrategiaDiferencaPequena.proximoAlvo &&
    estrategiaDiferencaPequena.rodadaG0
  ) {
    console.log("Processando G1 para estrat√©gia de valores altos/baixos");

    // Verificamos se o valor atual corresponde ao alvo esperado
    const acertou =
      (estrategiaDiferencaPequena.proximoAlvo === "baixo" &&
        tipoValorAtual === "baixo") ||
      (estrategiaDiferencaPequena.proximoAlvo === "alto" &&
        tipoValorAtual === "alto");

    if (acertou) {
      estrategiaDiferencaPequena.totalGreens++;
      estrategiaDiferencaPequena.vitoriaConsecutiva++;

      // Atualiza o contador de maior sequ√™ncia de vit√≥rias
      if (
        estrategiaDiferencaPequena.vitoriaConsecutiva >
        estrategiaDiferencaPequena.maiorVitoriaConsecutiva
      ) {
        estrategiaDiferencaPequena.maiorVitoriaConsecutiva =
          estrategiaDiferencaPequena.vitoriaConsecutiva;
      }

      await enviarTelegram(
        `üü¢ VALORES ${estrategiaDiferencaPequena.proximoAlvo.toUpperCase()}: ${res.resultado.toUpperCase()} [${
          res.player
        }-${
          res.banker
        }], ‚úÖ Green no G1! O valor ${valorDoVencedor} √© ${tipoValorAtual} como esperado [${
          estrategiaDiferencaPequena.vitoriaConsecutiva
        } VIT√ìRIA${
          estrategiaDiferencaPequena.vitoriaConsecutiva > 1 ? "S" : ""
        } CONSECUTIVA${
          estrategiaDiferencaPequena.vitoriaConsecutiva > 1 ? "S" : ""
        }]\nüìä Valores: Greens: ${
          estrategiaDiferencaPequena.totalGreens
        } | Reds: ${estrategiaDiferencaPequena.totalReds}`,
        "diferenca"
      );

      // Registrar a vit√≥ria
      estrategiaDiferencaPequena.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      resetarAlertaDiferencaPequena();
    } else {
      estrategiaDiferencaPequena.totalReds++;
      estrategiaDiferencaPequena.vitoriaConsecutiva = 0;

      await enviarTelegram(
        `‚ùå VALORES ${estrategiaDiferencaPequena.proximoAlvo.toUpperCase()}: ${res.resultado.toUpperCase()} [${
          res.player
        }-${
          res.banker
        }], ‚ùå Red! O valor ${valorDoVencedor} √© ${tipoValorAtual}, esper√°vamos ${
          estrategiaDiferencaPequena.proximoAlvo
        }\nüìä Valores: Greens: ${
          estrategiaDiferencaPequena.totalGreens
        } | Reds: ${estrategiaDiferencaPequena.totalReds}`,
        "diferenca"
      );

      // Registrar a derrota
      estrategiaDiferencaPequena.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      resetarAlertaDiferencaPequena();
    }
  }
  // An√°lise normal do hist√≥rico para detec√ß√£o de padr√µes de valores
  else if (
    !estrategiaDiferencaPequena.alertaAtivo &&
    estrategiaDiferencaPequena.ultimosResultados.length >=
      estrategiaDiferencaPequena.qtdConsiderada
  ) {
    // Verificar se temos uma sequ√™ncia de valores do mesmo tipo (altos ou baixos)
    const contagem = { baixo: 0, medio: 0, alto: 0 };

    estrategiaDiferencaPequena.ultimosResultados.forEach((r) => {
      contagem[r.tipo]++;
    });

    // Se temos predomin√¢ncia de valores baixos ou altos (pelo menos 3 em 4)
    const valorPredominante =
      contagem.baixo >= 3 ? "baixo" : contagem.alto >= 3 ? "alto" : null;

    if (valorPredominante) {
      // O padr√£o sugere que o pr√≥ximo valor ser√° o oposto do predominante
      estrategiaDiferencaPequena.alertaAtivo = true;
      estrategiaDiferencaPequena.proximoAlvo =
        valorPredominante === "baixo" ? "alto" : "baixo";
      // Para compatibilidade com c√≥digo existente
      estrategiaDiferencaPequena.alvoProximaRodada =
        estrategiaDiferencaPequena.proximoAlvo;

      await enviarTelegram(
        `‚ö†Ô∏è ESTRAT√âGIA DE VALORES: Detectados ${contagem[valorPredominante]} valores ${valorPredominante}s nos √∫ltimos ${estrategiaDiferencaPequena.qtdConsiderada} resultados!\nüéØ Entrada sugerida: Apostar em valores ${estrategiaDiferencaPequena.proximoAlvo}s na pr√≥xima rodada!`,
        "diferenca"
      );

      console.log(
        `Alerta ativado para valores! Pr√≥ximo valor esperado: ${estrategiaDiferencaPequena.proximoAlvo}`
      );
    }
  }
}

// Estrat√©gia Ap√≥s Empate
async function processarEstrategiaAposEmpate(res) {
  // Primeira rodada ap√≥s detectar empate (G0)
  if (
    estrategiaAposEmpate.alertaAtivo &&
    estrategiaAposEmpate.alvoAposEmpate &&
    estrategiaAposEmpate.rodadaG0 === null
  ) {
    console.log(
      `Alerta ativo ap√≥s empate, primeira tentativa (G0). Alvo: ${estrategiaAposEmpate.alvoAposEmpate}`
    );

    if (res.resultado === estrategiaAposEmpate.alvoAposEmpate) {
      estrategiaAposEmpate.totalGreens++;
      estrategiaAposEmpate.vitoriaConsecutiva++;

      // Atualiza o contador de maior sequ√™ncia de vit√≥rias
      if (
        estrategiaAposEmpate.vitoriaConsecutiva >
        estrategiaAposEmpate.maiorVitoriaConsecutiva
      ) {
        estrategiaAposEmpate.maiorVitoriaConsecutiva =
          estrategiaAposEmpate.vitoriaConsecutiva;
      }

      await enviarTelegram(
        `üü¢ AP√ìS EMPATE: ${res.resultado.toUpperCase()} [${res.player}-${
          res.banker
        }], ‚úÖ Green para estrat√©gia ap√≥s empate! [${
          estrategiaAposEmpate.vitoriaConsecutiva
        } VIT√ìRIA${
          estrategiaAposEmpate.vitoriaConsecutiva > 1 ? "S" : ""
        } CONSECUTIVA${
          estrategiaAposEmpate.vitoriaConsecutiva > 1 ? "S" : ""
        }]\nüìä Ap√≥s Empate: Greens: ${
          estrategiaAposEmpate.totalGreens
        } | Reds: ${estrategiaAposEmpate.totalReds}`,
        "aposEmpate"
      );

      // Registrar a vit√≥ria
      estrategiaAposEmpate.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      resetarAlertaAposEmpate();
    } else if (res.resultado === "tie") {
      await enviarTelegram(
        `‚ö†Ô∏è AP√ìS EMPATE: Novo empate detectado! Mantendo estrat√©gia e aguardando pr√≥xima rodada...`,
        "aposEmpate"
      );
      // Mant√©m o alerta ativo mas n√£o considera como vit√≥ria ou derrota
    } else {
      await enviarTelegram(
        `üîÑ AP√ìS EMPATE: ${res.resultado.toUpperCase()} [${res.player}-${
          res.banker
        }], vamos para o G1 na estrat√©gia ap√≥s empate...`,
        "aposEmpate"
      );
      estrategiaAposEmpate.rodadaG0 = res;
    }
  }
  // Segunda rodada ap√≥s detectar empate (G1)
  else if (
    estrategiaAposEmpate.alertaAtivo &&
    estrategiaAposEmpate.alvoAposEmpate &&
    estrategiaAposEmpate.rodadaG0
  ) {
    console.log("Processando G1 para estrat√©gia ap√≥s empate");

    if (res.resultado === estrategiaAposEmpate.alvoAposEmpate) {
      estrategiaAposEmpate.totalGreens++;
      estrategiaAposEmpate.vitoriaConsecutiva++;

      // Atualiza o contador de maior sequ√™ncia de vit√≥rias
      if (
        estrategiaAposEmpate.vitoriaConsecutiva >
        estrategiaAposEmpate.maiorVitoriaConsecutiva
      ) {
        estrategiaAposEmpate.maiorVitoriaConsecutiva =
          estrategiaAposEmpate.vitoriaConsecutiva;
      }

      await enviarTelegram(
        `üü¢ AP√ìS EMPATE: ${res.resultado.toUpperCase()} [${res.player}-${
          res.banker
        }], ‚úÖ Green no G1 para estrat√©gia ap√≥s empate! [${
          estrategiaAposEmpate.vitoriaConsecutiva
        } VIT√ìRIA${
          estrategiaAposEmpate.vitoriaConsecutiva > 1 ? "S" : ""
        } CONSECUTIVA${
          estrategiaAposEmpate.vitoriaConsecutiva > 1 ? "S" : ""
        }]\nüìä Ap√≥s Empate: Greens: ${
          estrategiaAposEmpate.totalGreens
        } | Reds: ${estrategiaAposEmpate.totalReds}`,
        "aposEmpate"
      );

      // Registrar a vit√≥ria
      estrategiaAposEmpate.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      resetarAlertaAposEmpate();
    } else if (res.resultado === "tie") {
      await enviarTelegram(
        `‚ö†Ô∏è AP√ìS EMPATE: Novo empate detectado no G1! Mantendo estrat√©gia e aguardando pr√≥xima rodada...`,
        "aposEmpate"
      );
      // Mant√©m o alerta ativo mas n√£o considera como vit√≥ria ou derrota
    } else {
      estrategiaAposEmpate.totalReds++;
      estrategiaAposEmpate.vitoriaConsecutiva = 0;

      await enviarTelegram(
        `‚ùå AP√ìS EMPATE: ${res.resultado.toUpperCase()} [${res.player}-${
          res.banker
        }], ‚ùå Red na estrat√©gia ap√≥s empate\nüìä Ap√≥s Empate: Greens: ${
          estrategiaAposEmpate.totalGreens
        } | Reds: ${estrategiaAposEmpate.totalReds}`,
        "aposEmpate"
      );

      // Registrar a derrota
      estrategiaAposEmpate.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      resetarAlertaAposEmpate();
    }
  }
  // An√°lise normal do hist√≥rico para detec√ß√£o de empates
  else if (!estrategiaAposEmpate.alertaAtivo) {
    // Se o resultado atual √© um empate, ativamos o alerta
    if (res.resultado === "tie") {
      estrategiaAposEmpate.alertaAtivo = true;

      // Analisar o hist√≥rico para determinar o alvo ap√≥s o empate
      // Estrat√©gia: apostar no lado que tinha maior contagem antes do empate
      let contPlayer = 0;
      let contBanker = 0;

      // Olha os √∫ltimos 5 resultados antes do empate para definir o alvo
      for (let i = 1; i < Math.min(6, historico.length); i++) {
        if (historico[i]?.resultado === "player") {
          contPlayer++;
        } else if (historico[i]?.resultado === "banker") {
          contBanker++;
        }
        // Ignoramos empates anteriores
      }

      // Define o alvo como o lado que apareceu mais vezes antes do empate
      if (contPlayer >= contBanker) {
        estrategiaAposEmpate.alvoAposEmpate = "player";
      } else {
        estrategiaAposEmpate.alvoAposEmpate = "banker";
      }

      await enviarTelegram(
        `‚ö†Ô∏è ESTRAT√âGIA AP√ìS EMPATE: Empate [${res.player}-${
          res.banker
        }] detectado!\nüéØ Entrada sugerida: ${estrategiaAposEmpate.alvoAposEmpate.toUpperCase()} na pr√≥xima rodada!`,
        "aposEmpate"
      );

      console.log(
        `Alerta ativado ap√≥s empate! Alvo: ${estrategiaAposEmpate.alvoAposEmpate}`
      );
    }
  }
}

// Estrat√©gia de Altern√¢ncia
async function processarEstrategiaAlternancia(res) {
  // Ignorar empates para esta estrat√©gia
  if (res.resultado === "tie") {
    console.log("Ignorando empate para estrat√©gia de altern√¢ncia");
    return;
  }

  // Primeira rodada ap√≥s detectar padr√£o (G0)
  if (
    estrategiaAlternancia.alertaAtivo &&
    estrategiaAlternancia.proximoResultadoEsperado &&
    estrategiaAlternancia.rodadaG0 === null
  ) {
    console.log(
      `Alerta ativo para altern√¢ncia, primeira tentativa (G0). Pr√≥ximo esperado: ${estrategiaAlternancia.proximoResultadoEsperado}`
    );

    if (res.resultado === estrategiaAlternancia.proximoResultadoEsperado) {
      estrategiaAlternancia.totalGreens++;
      estrategiaAlternancia.vitoriaConsecutiva++;

      // Atualiza o contador de maior sequ√™ncia de vit√≥rias
      if (
        estrategiaAlternancia.vitoriaConsecutiva >
        estrategiaAlternancia.maiorVitoriaConsecutiva
      ) {
        estrategiaAlternancia.maiorVitoriaConsecutiva =
          estrategiaAlternancia.vitoriaConsecutiva;
      }

      await enviarTelegram(
        `üü¢ ALTERN√ÇNCIA: ${res.resultado.toUpperCase()} [${res.player}-${
          res.banker
        }], ‚úÖ Green para estrat√©gia de altern√¢ncia! [${
          estrategiaAlternancia.vitoriaConsecutiva
        } VIT√ìRIA${
          estrategiaAlternancia.vitoriaConsecutiva > 1 ? "S" : ""
        } CONSECUTIVA${
          estrategiaAlternancia.vitoriaConsecutiva > 1 ? "S" : ""
        }]\nüìä Altern√¢ncia: Greens: ${
          estrategiaAlternancia.totalGreens
        } | Reds: ${estrategiaAlternancia.totalReds}`,
        "alternancia"
      );

      // Registrar a vit√≥ria
      estrategiaAlternancia.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      resetarAlertaAlternancia();
    } else {
      await enviarTelegram(
        `üîÑ ALTERN√ÇNCIA: ${res.resultado.toUpperCase()} [${res.player}-${
          res.banker
        }], vamos para o G1 na estrat√©gia de altern√¢ncia...`,
        "alternancia"
      );
      estrategiaAlternancia.rodadaG0 = res;
    }
  }
  // Segunda rodada ap√≥s detectar padr√£o (G1)
  else if (
    estrategiaAlternancia.alertaAtivo &&
    estrategiaAlternancia.proximoResultadoEsperado &&
    estrategiaAlternancia.rodadaG0
  ) {
    console.log("Processando G1 para estrat√©gia de altern√¢ncia");

    // No G1, apostamos no oposto do √∫ltimo resultado
    const proximoEsperadoG1 =
      estrategiaAlternancia.rodadaG0.resultado === "player"
        ? "banker"
        : "player";

    if (res.resultado === proximoEsperadoG1) {
      estrategiaAlternancia.totalGreens++;
      estrategiaAlternancia.vitoriaConsecutiva++;

      // Atualiza o contador de maior sequ√™ncia de vit√≥rias
      if (
        estrategiaAlternancia.vitoriaConsecutiva >
        estrategiaAlternancia.maiorVitoriaConsecutiva
      ) {
        estrategiaAlternancia.maiorVitoriaConsecutiva =
          estrategiaAlternancia.vitoriaConsecutiva;
      }

      await enviarTelegram(
        `üü¢ ALTERN√ÇNCIA: ${res.resultado.toUpperCase()} [${res.player}-${
          res.banker
        }], ‚úÖ Green no G1 para estrat√©gia de altern√¢ncia! [${
          estrategiaAlternancia.vitoriaConsecutiva
        } VIT√ìRIA${
          estrategiaAlternancia.vitoriaConsecutiva > 1 ? "S" : ""
        } CONSECUTIVA${
          estrategiaAlternancia.vitoriaConsecutiva > 1 ? "S" : ""
        }]\nüìä Altern√¢ncia: Greens: ${
          estrategiaAlternancia.totalGreens
        } | Reds: ${estrategiaAlternancia.totalReds}`,
        "alternancia"
      );

      // Registrar a vit√≥ria
      estrategiaAlternancia.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      resetarAlertaAlternancia();
    } else {
      estrategiaAlternancia.totalReds++;
      estrategiaAlternancia.vitoriaConsecutiva = 0;

      await enviarTelegram(
        `‚ùå ALTERN√ÇNCIA: ${res.resultado.toUpperCase()} [${res.player}-${
          res.banker
        }], ‚ùå Red na estrat√©gia de altern√¢ncia\nüìä Altern√¢ncia: Greens: ${
          estrategiaAlternancia.totalGreens
        } | Reds: ${estrategiaAlternancia.totalReds}`,
        "alternancia"
      );

      // Registrar a derrota
      estrategiaAlternancia.ultimaVitoria = {
        resultado: res.resultado,
        player: res.player,
        banker: res.banker,
        dataHora: new Date(),
      };

      // Resetar alerta
      resetarAlertaAlternancia();
    }
  }
  // An√°lise normal do hist√≥rico para detec√ß√£o de altern√¢ncia
  else if (!estrategiaAlternancia.alertaAtivo && historico.length >= 4) {
    // Filtra apenas resultados Player e Banker (sem empates)
    const resultadosFiltrados = historico
      .filter((item) => item.resultado !== "tie")
      .slice(0, 4);

    if (resultadosFiltrados.length >= 4) {
      // Verifica se h√° um padr√£o de altern√¢ncia (PBPB ou BPBP)
      const ehAlternancia =
        resultadosFiltrados[0].resultado !== resultadosFiltrados[1].resultado &&
        resultadosFiltrados[1].resultado !== resultadosFiltrados[2].resultado &&
        resultadosFiltrados[2].resultado !== resultadosFiltrados[3].resultado &&
        resultadosFiltrados[0].resultado === resultadosFiltrados[2].resultado &&
        resultadosFiltrados[1].resultado === resultadosFiltrados[3].resultado;

      if (ehAlternancia) {
        estrategiaAlternancia.alertaAtivo = true;
        estrategiaAlternancia.padrao = [
          resultadosFiltrados[3].resultado,
          resultadosFiltrados[2].resultado,
          resultadosFiltrados[1].resultado,
          resultadosFiltrados[0].resultado,
        ];

        // O pr√≥ximo esperado deve ser igual ao √∫ltimo detectado
        estrategiaAlternancia.proximoResultadoEsperado =
          resultadosFiltrados[0].resultado === "player" ? "banker" : "player";

        await enviarTelegram(
          `‚ö†Ô∏è ESTRAT√âGIA DE ALTERN√ÇNCIA: Padr√£o de altern√¢ncia detectado!
üîÑ √öltimos resultados: ${resultadosFiltrados
            .map((r) => r.resultado.toUpperCase().charAt(0))
            .join("")}
üéØ Entrada sugerida: ${estrategiaAlternancia.proximoResultadoEsperado.toUpperCase()} na pr√≥xima rodada!`,
          "alternancia"
        );

        console.log(
          `Alerta ativado para altern√¢ncia! Pr√≥ximo esperado: ${estrategiaAlternancia.proximoResultadoEsperado}`
        );
      }
    }
  }
}

// Fun√ß√µes para resetar alertas

function resetarAlertaSequencia() {
  console.log("Resetando alerta de sequ√™ncia");
  estrategiaSequencia.alertaAtivo = false;
  estrategiaSequencia.alvoAtual = null;
  estrategiaSequencia.rodadaG0 = null;
}

function resetarAlertaDiferencaPequena() {
  console.log("Resetando alerta de padr√£o");
  estrategiaDiferencaPequena.alertaAtivo = false;
  estrategiaDiferencaPequena.proximoAlvo = null;
  estrategiaDiferencaPequena.alvoProximaRodada = null;
  estrategiaDiferencaPequena.rodadaG0 = null;

  // N√£o limpamos todos os resultados para manter hist√≥rico parcial
  // Mantemos os √∫ltimos 2 para continuar an√°lise
  if (
    estrategiaDiferencaPequena.ultimosResultados &&
    estrategiaDiferencaPequena.ultimosResultados.length > 2
  ) {
    estrategiaDiferencaPequena.ultimosResultados =
      estrategiaDiferencaPequena.ultimosResultados.slice(0, 2);
  }
}

function resetarAlertaAposEmpate() {
  console.log("Resetando alerta ap√≥s empate");
  estrategiaAposEmpate.alertaAtivo = false;
  estrategiaAposEmpate.alvoAposEmpate = null;
  estrategiaAposEmpate.rodadaG0 = null;
}

function resetarAlertaAlternancia() {
  console.log("Resetando alerta de altern√¢ncia");
  estrategiaAlternancia.alertaAtivo = false;
  estrategiaAlternancia.padrao = [];
  estrategiaAlternancia.proximoResultadoEsperado = null;
  estrategiaAlternancia.rodadaG0 = null;
}

// Envia mensagem para o Telegram
async function enviarTelegram(mensagem, estrategia = "geral") {
  try {
    console.log(`Enviando para Telegram (${estrategia}): ${mensagem}`);

    let token, chatId;

    // Seleciona o token e chat ID apropriados com base na estrat√©gia
    switch (estrategia) {
      case "sequencia":
        token = TELEGRAM_TOKEN_SEQUENCIA;
        chatId = TELEGRAM_CHAT_ID_SEQUENCIA;
        break;
      case "diferenca":
      case "diferencas": // Use o mesmo token para ambos os casos
        token = TELEGRAM_TOKEN_DIFERENCA;
        chatId = TELEGRAM_CHAT_ID_DIFERENCA;
        break;
      case "aposEmpate":
        token = TELEGRAM_TOKEN_APOS_EMPATE;
        chatId = TELEGRAM_CHAT_ID_APOS_EMPATE;
        break;
      case "alternancia":
        // Use o token principal como fallback
        token = TELEGRAM_TOKEN;
        chatId = TELEGRAM_CHAT_ID;
        break;
      default:
        token = TELEGRAM_TOKEN;
        chatId = TELEGRAM_CHAT_ID;
    }

    // Se o token espec√≠fico n√£o estiver definido, usa o token geral
    if (!token) {
      token = TELEGRAM_TOKEN;
      chatId = TELEGRAM_CHAT_ID;
    }

    const url = `https://api.telegram.org/bot${token}/sendMessage`;

    const response = await axios.post(url, {
      chat_id: chatId,
      text: mensagem,
    });

    console.log(`Mensagem enviada com sucesso para grupo de ${estrategia}`);
    return response;
  } catch (err) {
    console.error(
      `Erro ao enviar mensagem para o Telegram (${estrategia}):`,
      err.message
    );
    if (err.response) {
      console.error("Resposta do Telegram:", err.response.data);
    }

    // Em caso de erro, tenta enviar pelo bot principal como fallback
    if (estrategia !== "geral") {
      try {
        console.log("Tentando enviar pelo bot principal como fallback...");
        const urlFallback = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
        await axios.post(urlFallback, {
          chat_id: TELEGRAM_CHAT_ID,
          text: `[FALLBACK - Falha ao enviar para grupo ${estrategia}] ${mensagem}`,
        });
        console.log("Mensagem enviada pelo bot fallback");
      } catch (fallbackErr) {
        console.error("Erro tamb√©m no fallback:", fallbackErr.message);
      }
    }
  }
}

// Envia resumo das estat√≠sticas
async function enviarResumo() {
  // Resumo geral para o grupo principal
  await enviarTelegram(`üìä RESUMO PARCIAL (√∫ltimas ${contadorRodadas} rodadas):
‚úÖ PLAYER: ${totalPlayer} (${Math.round(
    (totalPlayer / contadorRodadas) * 100
  )}%)
‚úÖ BANKER: ${totalBanker} (${Math.round(
    (totalBanker / contadorRodadas) * 100
  )}%)
‚úÖ TIE: ${totalTie} (${Math.round((totalTie / contadorRodadas) * 100)}%)

üé≤ ESTAT√çSTICAS DE SEQU√äNCIA:
Greens: ${estrategiaSequencia.totalGreens} | Reds: ${
    estrategiaSequencia.totalReds
  }
Maior sequ√™ncia de vit√≥rias: ${estrategiaSequencia.maiorVitoriaConsecutiva}

üé≤ ESTAT√çSTICAS DE DIFEREN√áA PEQUENA:
Greens: ${estrategiaDiferencaPequena.totalGreens} | Reds: ${
    estrategiaDiferencaPequena.totalReds
  }
Maior sequ√™ncia de vit√≥rias: ${
    estrategiaDiferencaPequena.maiorVitoriaConsecutiva
  }

üé≤ ESTAT√çSTICAS AP√ìS EMPATE:
Greens: ${estrategiaAposEmpate.totalGreens} | Reds: ${
    estrategiaAposEmpate.totalReds
  }
Maior sequ√™ncia de vit√≥rias: ${estrategiaAposEmpate.maiorVitoriaConsecutiva}

üé≤ ESTAT√çSTICAS DE ALTERN√ÇNCIA:
Greens: ${estrategiaAlternancia.totalGreens} | Reds: ${
    estrategiaAlternancia.totalReds
  }
Maior sequ√™ncia de vit√≥rias: ${estrategiaAlternancia.maiorVitoriaConsecutiva}

üéØ Maior pontua√ß√£o Player: ${maiorPontuacaoPlayer}
üéØ Maior pontua√ß√£o Banker: ${maiorPontuacaoBanker}
üî¢ Maior sequ√™ncia Player: ${maiorSequenciaPlayer}
üî¢ Maior sequ√™ncia Banker: ${maiorSequenciaBanker}
üî¢ Maior sequ√™ncia Tie: ${maiorSequenciaTie}`);

  // Resumo espec√≠fico para o grupo de Sequ√™ncia
  await enviarTelegram(
    `üìä RESUMO PARCIAL - SEQU√äNCIA (√∫ltimas ${contadorRodadas} rodadas):
‚úÖ Greens: ${estrategiaSequencia.totalGreens} | Reds: ${
      estrategiaSequencia.totalReds
    }
üîÑ Maior sequ√™ncia de vit√≥rias: ${estrategiaSequencia.maiorVitoriaConsecutiva}
${
  estrategiaSequencia.vitoriaConsecutiva > 0
    ? "üî• Sequ√™ncia atual: " +
      estrategiaSequencia.vitoriaConsecutiva +
      " vit√≥ria(s) consecutiva(s)"
    : ""
}
üî¢ Maior sequ√™ncia Player: ${maiorSequenciaPlayer}
üî¢ Maior sequ√™ncia Banker: ${maiorSequenciaBanker}`,
    "sequencia"
  );

  // Envia resumo espec√≠fico para o grupo de Padr√£o (antiga Diferen√ßa Pequena)
  await enviarTelegram(
    `üìä RESUMO PARCIAL - PADR√ÉO (√∫ltimas ${contadorRodadas} rodadas):
‚úÖ Greens: ${estrategiaDiferencaPequena.totalGreens} | Reds: ${
      estrategiaDiferencaPequena.totalReds
    }
üîÑ Maior sequ√™ncia de vit√≥rias: ${
      estrategiaDiferencaPequena.maiorVitoriaConsecutiva
    }
${
  estrategiaDiferencaPequena.vitoriaConsecutiva > 0
    ? "üî• Sequ√™ncia atual: " +
      estrategiaDiferencaPequena.vitoriaConsecutiva +
      " vit√≥ria(s) consecutiva(s)"
    : ""
}
üìä Player: ${Math.round(
      (totalPlayer / contadorRodadas) * 100
    )}% | Banker: ${Math.round((totalBanker / contadorRodadas) * 100)}%`,
    "diferenca"
  );

  // Resumo espec√≠fico para o grupo de Ap√≥s Empate
  await enviarTelegram(
    `üìä RESUMO PARCIAL - AP√ìS EMPATE (√∫ltimas ${contadorRodadas} rodadas):
‚úÖ Greens: ${estrategiaAposEmpate.totalGreens} | Reds: ${
      estrategiaAposEmpate.totalReds
    }
üîÑ Maior sequ√™ncia de vit√≥rias: ${estrategiaAposEmpate.maiorVitoriaConsecutiva}
${
  estrategiaAposEmpate.vitoriaConsecutiva > 0
    ? "üî• Sequ√™ncia atual: " +
      estrategiaAposEmpate.vitoriaConsecutiva +
      " vit√≥ria(s) consecutiva(s)"
    : ""
}
üé≤ Total de Ties: ${totalTie} (${Math.round(
      (totalTie / contadorRodadas) * 100
    )}%)
üî¢ Maior sequ√™ncia Tie: ${maiorSequenciaTie}`,
    "aposEmpate"
  );

  // Resumo espec√≠fico para o grupo de Altern√¢ncia
  await enviarTelegram(
    `üìä RESUMO PARCIAL - ALTERN√ÇNCIA (√∫ltimas ${contadorRodadas} rodadas):
‚úÖ Greens: ${estrategiaAlternancia.totalGreens} | Reds: ${
      estrategiaAlternancia.totalReds
    }
üîÑ Maior sequ√™ncia de vit√≥rias: ${estrategiaAlternancia.maiorVitoriaConsecutiva}
${
  estrategiaAlternancia.vitoriaConsecutiva > 0
    ? "üî• Sequ√™ncia atual: " +
      estrategiaAlternancia.vitoriaConsecutiva +
      " vit√≥ria(s) consecutiva(s)"
    : ""
}
‚úÖ PLAYER: ${totalPlayer} (${Math.round(
      (totalPlayer / contadorRodadas) * 100
    )}%)
‚úÖ BANKER: ${totalBanker} (${Math.round(
      (totalBanker / contadorRodadas) * 100
    )}%)`,
    "alternancia"
  );
}

// Fun√ß√£o para relat√≥rio detalhado a cada 200 rodadas
async function enviarRelatorioDetalhado() {
  // Relat√≥rio completo para o grupo principal
  await enviarTelegram(`üîç RELAT√ìRIO DETALHADO (RODADA #${contadorRodadas})

üé≤ ESTAT√çSTICAS GERAIS:
‚úÖ PLAYER: ${totalPlayer} (${Math.round(
    (totalPlayer / contadorRodadas) * 100
  )}%)
‚úÖ BANKER: ${totalBanker} (${Math.round(
    (totalBanker / contadorRodadas) * 100
  )}%)
‚úÖ TIE: ${totalTie} (${Math.round((totalTie / contadorRodadas) * 100)}%)

üé≤ ESTRAT√âGIA DE SEQU√äNCIA:
‚úÖ Greens: ${estrategiaSequencia.totalGreens} (${Math.round(
    (estrategiaSequencia.totalGreens /
      (estrategiaSequencia.totalGreens + estrategiaSequencia.totalReds || 1)) *
      100
  )}% de aproveitamento)
‚ùå Reds: ${estrategiaSequencia.totalReds}
üîÑ Maior sequ√™ncia de vit√≥rias: ${estrategiaSequencia.maiorVitoriaConsecutiva}
${
  estrategiaSequencia.vitoriaConsecutiva > 0
    ? "üî• Sequ√™ncia atual: " +
      estrategiaSequencia.vitoriaConsecutiva +
      " vit√≥ria(s) consecutiva(s)"
    : ""
}

üé≤ ESTRAT√âGIA DE DIFEREN√áA PEQUENA:
‚úÖ Greens: ${estrategiaDiferencaPequena.totalGreens} (${Math.round(
    (estrategiaDiferencaPequena.totalGreens /
      (estrategiaDiferencaPequena.totalGreens +
        estrategiaDiferencaPequena.totalReds || 1)) *
      100
  )}% de aproveitamento)
‚ùå Reds: ${estrategiaDiferencaPequena.totalReds}
üîÑ Maior sequ√™ncia de vit√≥rias: ${
    estrategiaDiferencaPequena.maiorVitoriaConsecutiva
  }
${
  estrategiaDiferencaPequena.vitoriaConsecutiva > 0
    ? "üî• Sequ√™ncia atual: " +
      estrategiaDiferencaPequena.vitoriaConsecutiva +
      " vit√≥ria(s) consecutiva(s)"
    : ""
}

üé≤ ESTRAT√âGIA AP√ìS EMPATE:
‚úÖ Greens: ${estrategiaAposEmpate.totalGreens} (${Math.round(
    (estrategiaAposEmpate.totalGreens /
      (estrategiaAposEmpate.totalGreens + estrategiaAposEmpate.totalReds ||
        1)) *
      100
  )}% de aproveitamento)
‚ùå Reds: ${estrategiaAposEmpate.totalReds}
üîÑ Maior sequ√™ncia de vit√≥rias: ${estrategiaAposEmpate.maiorVitoriaConsecutiva}
${
  estrategiaAposEmpate.vitoriaConsecutiva > 0
    ? "üî• Sequ√™ncia atual: " +
      estrategiaAposEmpate.vitoriaConsecutiva +
      " vit√≥ria(s) consecutiva(s)"
    : ""
}

üé≤ ESTRAT√âGIA DE ALTERN√ÇNCIA:
‚úÖ Greens: ${estrategiaAlternancia.totalGreens} (${Math.round(
    (estrategiaAlternancia.totalGreens /
      (estrategiaAlternancia.totalGreens + estrategiaAlternancia.totalReds ||
        1)) *
      100
  )}% de aproveitamento)
‚ùå Reds: ${estrategiaAlternancia.totalReds}
üîÑ Maior sequ√™ncia de vit√≥rias: ${estrategiaAlternancia.maiorVitoriaConsecutiva}
${
  estrategiaAlternancia.vitoriaConsecutiva > 0
    ? "üî• Sequ√™ncia atual: " +
      estrategiaAlternancia.vitoriaConsecutiva +
      " vit√≥ria(s) consecutiva(s)"
    : ""
}

üéØ Maior pontua√ß√£o Player: ${maiorPontuacaoPlayer}
üéØ Maior pontua√ß√£o Banker: ${maiorPontuacaoBanker}
üî¢ Maior sequ√™ncia Player: ${maiorSequenciaPlayer}
üî¢ Maior sequ√™ncia Banker: ${maiorSequenciaBanker}
üî¢ Maior sequ√™ncia Tie: ${maiorSequenciaTie}

üìà Total de rodadas analisadas: ${contadorRodadas}

üì± Bot monitorando 24/7 - Mantenha as apostas respons√°veis!`);

  // Enviar relat√≥rios espec√≠ficos para os grupos de cada estrat√©gia
  // (c√≥digo similar ao enviarResumo, mas mais detalhado)
}

// Adicione esta nova fun√ß√£o para enviar o relat√≥rio di√°rio e reiniciar contadores
async function enviarRelatorioDiarioEReiniciar() {
  const hoje = new Date();
  const dataFormatada = hoje.toLocaleDateString("pt-BR", {
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
  });

  // Relat√≥rio completo para o grupo principal
  await enviarTelegram(`üìÖ RELAT√ìRIO FINAL DO DIA - ${dataFormatada}

üé≤ RESUMO DAS √öLTIMAS 24 HORAS:
‚úÖ PLAYER: ${totalPlayer} (${Math.round(
    (totalPlayer / contadorRodadas) * 100
  )}%)
‚úÖ BANKER: ${totalBanker} (${Math.round(
    (totalBanker / contadorRodadas) * 100
  )}%)
‚úÖ TIE: ${totalTie} (${Math.round((totalTie / contadorRodadas) * 100)}%)

üíØ TAXA DE APROVEITAMENTO DAS ESTRAT√âGIAS:
üéØ Sequ√™ncia: ${Math.round(
    (estrategiaSequencia.totalGreens /
      (estrategiaSequencia.totalGreens + estrategiaSequencia.totalReds || 1)) *
      100
  )}%
üéØ Diferen√ßa Pequena: ${Math.round(
    (estrategiaDiferencaPequena.totalGreens /
      (estrategiaDiferencaPequena.totalGreens +
        estrategiaDiferencaPequena.totalReds || 1)) *
      100
  )}%
üéØ Ap√≥s Empate: ${Math.round(
    (estrategiaAposEmpate.totalGreens /
      (estrategiaAposEmpate.totalGreens + estrategiaAposEmpate.totalReds ||
        1)) *
      100
  )}%
üéØ Altern√¢ncia: ${Math.round(
    (estrategiaAlternancia.totalGreens /
      (estrategiaAlternancia.totalGreens + estrategiaAlternancia.totalReds ||
        1)) *
      100
  )}%

üéØ Maior pontua√ß√£o Player: ${maiorPontuacaoPlayer}
üéØ Maior pontua√ß√£o Banker: ${maiorPontuacaoBanker}
üî¢ Maior sequ√™ncia Player: ${maiorSequenciaPlayer}
üî¢ Maior sequ√™ncia Banker: ${maiorSequenciaBanker}
üî¢ Maior sequ√™ncia Tie: ${maiorSequenciaTie}

üìà Total de rodadas analisadas: ${contadorRodadas}

üîÑ Contadores reiniciados para o novo dia.
üì± Bot continua monitorando 24/7 - Boas apostas!`);

  // Reinicia todos os contadores para o novo dia
  totalPlayer = 0;
  totalBanker = 0;
  totalTie = 0;

  estrategiaSequencia.totalGreens = 0;
  estrategiaSequencia.totalReds = 0;
  estrategiaSequencia.vitoriaConsecutiva = 0;

  estrategiaDiferencaPequena.totalGreens = 0;
  estrategiaDiferencaPequena.totalReds = 0;
  estrategiaDiferencaPequena.vitoriaConsecutiva = 0;

  estrategiaAposEmpate.totalGreens = 0;
  estrategiaAposEmpate.totalReds = 0;
  estrategiaAposEmpate.vitoriaConsecutiva = 0;

  estrategiaAlternancia.totalGreens = 0;
  estrategiaAlternancia.totalReds = 0;
  estrategiaAlternancia.vitoriaConsecutiva = 0;

  contadorRodadas = 0;

  // N√£o reiniciamos sequ√™ncias m√°ximas hist√≥ricas

  console.log("Contadores reiniciados para o novo dia.");
}

// Fun√ß√£o para verificar a mudan√ßa de dia
function verificarMudancaDeDia() {
  const dataAtual = new Date();
  const diaAtual = dataAtual.getDate();

  // Se o dia mudou
  if (diaAtual !== ultimoDiaVerificado) {
    console.log(
      `Dia mudou de ${ultimoDiaVerificado} para ${diaAtual}. Enviando relat√≥rio di√°rio e reiniciando contadores.`
    );

    // Envia o relat√≥rio do dia anterior e reinicia contadores
    enviarRelatorioDiarioEReiniciar();

    // Atualiza o dia verificado
    ultimoDiaVerificado = diaAtual;
  }
}

// Gerenciamento do encerramento
process.on("SIGINT", async () => {
  console.log("Encerrando bot graciosamente...");
  if (browser) {
    console.log("Fechando navegador...");
    await browser
      .close()
      .catch((err) => console.error("Erro ao fechar navegador:", err));
  }
  process.exit(0);
});

process.on("SIGTERM", async () => {
  console.log("Recebido sinal de t√©rmino...");
  if (browser) {
    console.log("Fechando navegador...");
    await browser
      .close()
      .catch((err) => console.error("Erro ao fechar navegador:", err));
  }
  process.exit(0);
});

// Inicia o bot
(async function () {
  try {
    console.log("üé≤ Bot do Bac Bo iniciado!");
    console.log("üîç Monitorando resultados do Bac Bo...");

    // Envia mensagem inicial para todos os grupos
    await enviarTelegram(
      "üé≤ Bot do Bac Bo iniciado! Monitorando resultados e enviando relat√≥rios gerais..."
    );
    await enviarTelegram(
      "üé≤ Bot do Bac Bo iniciado! Monitorando estrat√©gia de SEQU√äNCIA (4 iguais)...",
      "sequencia"
    );
    await enviarTelegram(
      "üé≤ Bot do Bac Bo iniciado! Monitorando estrat√©gia de DIFEREN√áA PEQUENA (‚â§2)...",
      "diferenca"
    );
    await enviarTelegram(
      "üé≤ Bot do Bac Bo iniciado! Monitorando estrat√©gia AP√ìS EMPATE...",
      "aposEmpate"
    );

    // Executa a primeira vez
    await getBacBoResultado();

    // Configura o intervalo para execu√ß√£o regular (a cada 15 segundos)
    console.log("‚è±Ô∏è Configurando intervalo de execu√ß√£o a cada 30 segundos");
    setInterval(getBacBoResultado, 30000);
    console.log("‚è±Ô∏è Configurando verifica√ß√£o de mudan√ßa de dia a cada minuto");
    setInterval(verificarMudancaDeDia, 60000); // Verifica a cada minuto
  } catch (err) {
    console.error("Erro fatal ao iniciar o bot:", err);
    // Tenta enviar mensagem de erro ao Telegram
    enviarTelegram("‚ùå Erro fatal ao iniciar o bot. Verifique os logs.").catch(
      () => {
        console.error(
          "Tamb√©m n√£o foi poss√≠vel enviar mensagem de erro ao Telegram"
        );
      }
    );
  }
})();

// Inicia servidor Express para manter o bot vivo no Render
const app = express();
const PORT = process.env.PORT || 3000;

app.get("/", (req, res) => {
  res.send("‚úÖ Bot do Bac Bo est√° rodando!");
});

app.listen(PORT, () => {
  console.log(`üåê Web service ativo na porta ${PORT}`);
});
